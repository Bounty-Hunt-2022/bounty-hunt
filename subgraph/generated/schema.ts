// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BountyMaker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("bountyCount", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BountyMaker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BountyMaker entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BountyMaker", id.toString(), this);
    }
  }

  static load(id: string): BountyMaker | null {
    return changetype<BountyMaker | null>(store.get("BountyMaker", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bountyCount(): BigInt {
    let value = this.get("bountyCount");
    return value!.toBigInt();
  }

  set bountyCount(value: BigInt) {
    this.set("bountyCount", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Bounty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("active", Value.fromBoolean(false));
    this.set("rewards", Value.fromBigIntArray(new Array(0)));
    this.set("uri", Value.fromString(""));
    this.set("admin", Value.fromBytes(Bytes.empty()));
    this.set("tokenLimit", Value.fromBigInt(BigInt.zero()));
    this.set("deadline", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bounty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bounty entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bounty", id.toString(), this);
    }
  }

  static load(id: string): Bounty | null {
    return changetype<Bounty | null>(store.get("Bounty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get rewards(): Array<BigInt> {
    let value = this.get("rewards");
    return value!.toBigIntArray();
  }

  set rewards(value: Array<BigInt>) {
    this.set("rewards", Value.fromBigIntArray(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get tokenLimit(): BigInt {
    let value = this.get("tokenLimit");
    return value!.toBigInt();
  }

  set tokenLimit(value: BigInt) {
    this.set("tokenLimit", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get winners(): Array<string> {
    let value = this.get("winners");
    return value!.toStringArray();
  }

  set winners(value: Array<string>) {
    this.set("winners", Value.fromStringArray(value));
  }
}

export class Win extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hunter", Value.fromString(""));
    this.set("bounty", Value.fromString(""));
    this.set("nftUri", Value.fromString(""));
    this.set("claimed", Value.fromBoolean(false));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Win entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Win entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Win", id.toString(), this);
    }
  }

  static load(id: string): Win | null {
    return changetype<Win | null>(store.get("Win", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hunter(): string {
    let value = this.get("hunter");
    return value!.toString();
  }

  set hunter(value: string) {
    this.set("hunter", Value.fromString(value));
  }

  get bounty(): string {
    let value = this.get("bounty");
    return value!.toString();
  }

  set bounty(value: string) {
    this.set("bounty", Value.fromString(value));
  }

  get reward(): BigInt | null {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set reward(value: BigInt | null) {
    if (!value) {
      this.unset("reward");
    } else {
      this.set("reward", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftUri(): string {
    let value = this.get("nftUri");
    return value!.toString();
  }

  set nftUri(value: string) {
    this.set("nftUri", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Hunter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewardWon", Value.fromBigInt(BigInt.zero()));
    this.set("winCount", Value.fromBigInt(BigInt.zero()));
    this.set("rewardClaimed", Value.fromBigInt(BigInt.zero()));
    this.set("winClaimed", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hunter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Hunter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Hunter", id.toString(), this);
    }
  }

  static load(id: string): Hunter | null {
    return changetype<Hunter | null>(store.get("Hunter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wins(): Array<string> {
    let value = this.get("wins");
    return value!.toStringArray();
  }

  set wins(value: Array<string>) {
    this.set("wins", Value.fromStringArray(value));
  }

  get rewardWon(): BigInt {
    let value = this.get("rewardWon");
    return value!.toBigInt();
  }

  set rewardWon(value: BigInt) {
    this.set("rewardWon", Value.fromBigInt(value));
  }

  get winCount(): BigInt {
    let value = this.get("winCount");
    return value!.toBigInt();
  }

  set winCount(value: BigInt) {
    this.set("winCount", Value.fromBigInt(value));
  }

  get rewardClaimed(): BigInt {
    let value = this.get("rewardClaimed");
    return value!.toBigInt();
  }

  set rewardClaimed(value: BigInt) {
    this.set("rewardClaimed", Value.fromBigInt(value));
  }

  get winClaimed(): BigInt {
    let value = this.get("winClaimed");
    return value!.toBigInt();
  }

  set winClaimed(value: BigInt) {
    this.set("winClaimed", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
